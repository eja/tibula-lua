-- Copyright (C) 2007-2020 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Suite española, Op. 47 


tibula={}

eja.mime["tibula"]="application/tibula"
eja.mimeApp['application/tibula']='tibulaWeb'
eja.lib.tibulaStop='tibulaStop'
eja.lib.tibulaStart='tibulaStart'
eja.lib.tibulaInstall='tibulaInstall'
eja.lib.tibulaImport='tibulaImport'
eja.lib.tibulaExport='tibulaExport'

eja.help.tibulaStart='start tibula [web port] {35248}'
eja.help.tibulaStop='stop tibula [web port] {35248}'
eja.help.tibulaInstall='create db/user and install demo version'
eja.help.tibulaPath='tibula data path'
eja.help.tibulaScript='javascript full url {https://cdn.tibula.net/tibula.js}'
eja.help.tibulaCron='cron keep alive interval {0=off}'
eja.help.tibulaImport='import module {file name}'
eja.help.tibulaExport='export module {module name}'

eja.opt.webSize=65536


function tibulaCheck()
 if ejaNumber(eja.version) == 0 or ejaNumber(eja.version) < 12.1216 then
  ejaError('[tibula] eja version too old, please update eja first.')
  os.exit()
 end
end


function tibulaStart() 
 tibulaCheck()
 if ejaNumber(eja.opt.tibulaStart) > 0 then 
  eja.opt.webPort=eja.opt.tibulaStart 
 else
  eja.opt.webPort=eja.opt.webPort or 35248
 end
 ejaInfo('[tibula] starting on web port %s and database %s',eja.opt.webPort,eja.opt.tibulaDatabase);
 if tibulaSqlStart(eja.opt.tibulaType,eja.opt.tibulaUsername,eja.opt.tibulaPassword,eja.opt.tibulaHostname,eja.opt.tibulaDatabase) then
  if ejaNumber(eja.opt.tibulaCron) > 0 then
   if ejaFork()==0 then 
    ejaPidWrite('tibula.cron.'..eja.opt.webPort);
    ejaInfo('[tibula] cron job start with %s sec. interval',eja.opt.tibulaCron);
    while true do
     ejaSleep(ejaNumber(eja.opt.tibulaCron))
     local data=ejaWebGet("http://localhost:%s/.tibula",eja.opt.webPort)
     if not data or #data < 1 then
      ejaWarn('[tibula] cron job stop')
      break
     end
    end
    os.exit(); 
   end
  end 
  tibulaTableStart();
  ejaWebStart();
 end
end


function tibulaStop()
 ejaInfo('[tibula] halting on web port %s',eja.opt.webPort);
 if ejaNumber(eja.opt.tibulaStop) > 0 then eja.opt.webPort=eja.opt.tibulaStop end
 ejaPidKillTree(ejaSprintf('web_%d',eja.opt.webPort or 35248))
end


function tibulaWeb(web) 
 tibulaCheck()
 tibulaTableStart()
 tibulaSqlCheck()
 
 if web.postFile and web.headerIn then
  if web.headerIn['content-type'] == 'application/json' then
   local a=ejaJsonFileRead(web.postFile)
   if a then 
    for k,v in next,a do
     web.opt[k]=v
    end
    web.opt.ejaOut='json' 
   end
  end
  if web.headerIn['content-type'] == 'application/octet-stream' then
   local file=ejaFileRead(web.postFile)
   local a={}
   a.hash=ejaSha256(file)
   ejaFileMove(web.postFile,tibula.path..a.hash)
   web.headerOut['Content-Type'] = 'application/json'
   web.data=ejaJsonEncode(a)
   web.opt=nil
  end
  ejaFileRemove(web.postFile)
 end

 if web.opt then
  if web.opt.data and web.opt.data:match('^[%x]+$') then
   local path=tibula.path..web.opt.data
   if ejaFileCheck(path) then
    web.headerOut['Content-Disposition']='attachment; filename="'..web.opt.data..'"'
    web.file=path
   else
    web.status='404 Not Found'
   end
  else 
   tibulaTableImport(web.opt);
   tibulaTableRun(web)
   web.data=tibulaTableExport()
   for k,v in next,tibula.ejaHttpHeaders do web.headerOut[k]=v; end
   tibulaTableStop()
  end
 end
 
 return web
end


function tibulaInstall()
 ejaUpdate()
 local type=eja.opt.tibulaType or "maria"
 local user=eja.opt.tibulaUsername or ejaReadLine("tibula db username: ")
 local pass=eja.opt.tibulaPassword or ejaReadLine("tibula db password: ")
 local host=eja.opt.tibulaHostname or 'localhost'
 local db=eja.opt.tibulaDatabase or ejaReadLine("tibula db name: ")
 local installUsername=eja.opt.tibulaInstallUsername or ejaReadLine("local db username: ")
 local installPassword=eja.opt.tibulaInstallPassword or ejaReadLine("local db password: ")
 if user ~= "" and pass ~= "" and db ~= "" then
  local sqlTmpFile=eja.pathTmp..'/tibula.install.sql'
  if ejaFileStat(sqlTmpFile) then ejaFileRemove(sqlTmpFile) end
  ejaFileWrite(sqlTmpFile,ejaSprintf([[
   CREATE DATABASE %s;
   CREATE USER '%s'@'%s' IDENTIFIED BY '%s';
   GRANT ALL PRIVILEGES ON %s.* TO '%s'@'%s' WITH GRANT OPTION;
   FLUSH PRIVILEGES;
   USE %s;
  ]],db,user,host,pass,db,user,host,db))
  ejaExecute('wget -qO - "http://github.com/ubaldus/tibula/raw/master/tibula.sql" >> %s',sqlTmpFile)
  if installUsername ~= "" and installPassword ~= "" then
   ejaExecute('mysql -u %s -p%s < %s',installUsername,installPassword,sqlTmpFile)
  else
   ejaExecute('mysql < "%s"',sqlTmpFile)   
  end
  ejaFileRemove(sqlTmpFile)
  if tibulaSqlStart('maria',user,pass,'localhost',db) then
   ejaInfo('[tibula] database ready')
   if not ejaFileStat(eja.pathEtc..'/eja.init') then ejaSetup() end
   if ejaFileAppend(eja.pathEtc..'/eja.init',ejaSprintf([[
    --tibula setup
    eja.opt.tibulaUsername="%s"
    eja.opt.tibulaPassword="%s"
    eja.opt.tibulaDatabase="%s"
    eja.opt.tibulaCron=300
   ]],user,pass,db)) then
    ejaWarn('[tibula] eja.init updated, please check')
   end
  else
   ejaError('[tibula] database installation error')   
  end
 else
  ejaError('[tibula] username, password and database name are mandatory')
 end
end


function tibulaImport(module)
 local module=module or eja.opt.tibulaImport
 local data=ejaJsonFileRead(module)
 if data then
  if tibulaSqlCheck() then
   tibulaModuleImport(data)
   ejaInfo('[tibula] module %s imported from file %s',data.name,module)
  end
 else
  ejaError('[tibula] file not valid')
 end
end


function tibulaExport(module)
 local module=module or eja.opt.tibulaExport
 if tibulaSqlCheck() then
  local data=ejaJsonEncode(tibulaModuleExport(module),1)
  if data then
   ejaFileWrite(module..'.json',data)
   ejaInfo('[tibula] module %s exported to file %s.json',module,module)
  else
   ejaError('[tibula] module not found') 
  end
 end
end
-- Copyright (C) 2007-2018 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Malagueña


function tibulaJsonExport(moduleId)         --export data as json output
 tibula['ejaHttpHeaders']["Content-Type"]="application/json; charset=utf-8"
 tibula['ejaHttpHeaders']["Pragma"]="no-cache";
 tibula['ejaHttpHeaders']["Expires"]= "-1";
 tibula['ejaHttpHeaders']["Cache-Control"]="no-cache";

 local a={}

 a.ejaModule={}
 
 if ejaCheck(tibula['ejaActionType'],"List") then
 if ejaCheck(tibula['ejaSearchList']) then 
  local t=1;
  if ejaCheck(tibula['ejaLinking']) and not ejaCheck(tibula['ejaLinkingField']) and not ejaCheck(tibula['ejaModuleName'],"ejaFiles") then t=2 end 
  if ejaCheck(tibula['ejaMatrix']) then t=3 end
   a.ejaModule=tibulaJsonTable(tibula['ejaSearchList'],t); 
  else 
   tibulaReset();
   tibula['ejaActionType']="Search"; 
   tibulaInfo("ejaSearchEmpty");
  end
 end
 
 if not ejaCheck(tibula['ejaActionType'],"List") and ejaCheck(tibula['ejaFields']) then 
  a.ejaModule.ejaFields={}
  for k,v in pairs(tibula['ejaFields']) do
   a.ejaModule.ejaFields[#a.ejaModule.ejaFields+1]=tibulaJsonField(v['name'],v['type'],v['value'],v['values'])
  end
 end

 
 a.ejaMenu=tibulaJsonMenu(moduleId)
 
 a.ejaCommand=tibulaJsonCommand(moduleId)
 
 a.ejaInfo=tibulaJsonInfo()

 a.ejaModule.ejaId=tibula['ejaId']
 a.ejaModule.ejaModuleId=tibula['ejaModuleId']
 a.ejaModule.ejaSession=tibula['ejaSession']
 a.ejaModule.ejaModuleName=tibula['ejaModuleName']

 return ejaJsonEncode(a); 
end


function tibulaJsonMenu(moduleId)
 local i=0;
 local a={};
 local aa=tibulaSqlModuleTree(tibula['ejaOwner'],moduleId);
 
  a.ejaMenuPath={}
  for i=#aa['pathId'],1,-1 do
   a.ejaMenuPath[#a.ejaMenuPath+1]={ ejaModuleChange=aa['pathId'][i], name=aa['pathName'][i], label=tibulaTranslate(aa['pathName'][i]) }
  end

  a.ejaMenuLinks={} 
  for i=1,#aa['treeId'] do
   a.ejaMenuLinks[#a.ejaMenuLinks+1]={ ejaModuleChange=aa['treeId'][i], name=aa['treeName'][i], label=tibulaTranslate(aa['treeName'][i]) }
  end

  a.ejaModuleLinks={}
  for i=1,#aa['linkId'] do
   a.ejaModuleLinks[#a.ejaModuleLinks+1]={ ejaModuleChange=aa['linkId'][i], ejaModuleLink=tibula['ejaModuleId']..'.'..tibula['ejaId'], name=aa['linkName'][i], label=tibulaTranslate(aa['linkName'][i]) }
  end
  for i=1,#aa['historyId'] do
   a.ejaModuleLinks[#a.ejaModuleLinks+1]={ ejaModuleLinkBack=aa['historyId'][i], name=aa['historyName'][i], label=tibulaTranslate(aa['historyName'][i]) }
  end

 return a;
end


function tibulaJsonCommand(moduleId)
 local a={};
 
 for k,v in ipairs(tibulaSqlCommandArray(tibula['ejaOwner'],moduleId,tibula['ejaActionType'])) do
  local command={ name=v, label=tibulaTranslate(v) }
  if not ejaCheck(tibula['ejaSqlQuery64']) and ejaCheck(v,"list") then command=nil; end
  if ejaCheck(tibula['ejaSearchStep']) then 
   if not ejaCheck(tibula['ejaSqlLimit']) and ejaCheck(v,"previous") then command=nil; end
   if ejaCheck(tibula['ejaSqlLimit']) and not ejaCheck(tibula['ejaSearchStep'],tibula['ejaSqlCount']) and ejaCheck(v,"next") then command=nil; end
  end
  if not ejaCheck(tibula['ejaLinking']) and ( ejaCheck(v,"link") or ejaCheck(v,"unlink") or ejaCheck(v,"searchLink") or ejaCheck(v,"linkBack") ) then command=nil; end
  if ejaCheck(v,"searchLink") then command=nil; end
  if command then 
   a[#a+1]=command;
  end
 end
 
 return a;
end


function tibulaJsonField(fieldName, fieldType, fieldValue, fieldValueArray) 	--return the json field for name of tType. 
 local r="";
 local a={}
 
 a.type=fieldType
 a.name=fieldName
 a.label=tibulaTranslate(fieldName)
 a.value=fieldValue
 
 if ejaCheck(fieldType,"sqlTable") or ( ejaCheck(fieldType,"view") and ejaCheck(fieldValueArray) ) then 
  local aa=tibulaJsonTable(fieldValueArray,0)
  a.list=aa.ejaTableList
  a.head=aa.ejaTableHeader
 end 

 if ejaCheck(fieldType,"select") or ejaCheck(fieldType,"sqlMatrix") then
  local options="";
  local selected="";
  a.list={}
  for k,v in ipairs(getmetatable(fieldValueArray)) do
   a.list[#a.list+1]={ name=fieldValueArray[v], value=v }
  end
 end

 return a;
end


function tibulaJsonTable(sqlArray,t) 	--return json table of results for t. t=0 output plain table, t=1 first column is ejaId; t=2 first column ejaId, second powerLink.
 local a={}
 local y=0

 a.ejaTableList={}
 a.ejaTableHeader={}
 
 for key,row in pairs (sqlArray) do
  y=y+1

  local ax={}
  for k,v in pairs(getmetatable(sqlArray)) do
   if y == 1 then 
    a.ejaTableHeader[#a.ejaTableHeader+1]={}
    a.ejaTableHeader[#a.ejaTableHeader][v]=tibulaTranslate(v)
   end
   if row[v] then value=row[v] else value="" end
   if ejaString(v) == "ejaId" and t > 0 then 
    ax.ejaId=value 
    if t == 2 then
     local sql=tibulaSqlArray('SELECT ejaId,power FROM ejaLinks WHERE srcModuleId=%d AND srcFieldId=%s AND dstModuleId=%s AND dstFieldId=%s;',tibula['ejaModuleId'],value,tibula['ejaLinkModuleId'],tibula['ejaLinkFieldId']);
     if not ejaCheck(sql) then 
      sql={}
      sql['ejaId']=0; 
      sql['power']=0;
     end
     ax.ejaId=value
     ax.ejaLinkPowerValue=ejaNumber(sql.power)
     ax.ejaLinkPowerId=ejaNumber(sql.ejaId) 
    end
   else
    ax[v]=value
   end
  end
  a.ejaTableList[#a.ejaTableList+1]=ax
 end

 if ejaCheck(tibula['ejaSqlCountTotal']) then
  a.ejaTableCountTotal=tibula.ejaSqlCountTotal
  a.ejaTableLimit=tibula.ejaSqlLimit
  a.ejaTableCount=tibula.ejaSqlCount
  a.ejaTableSearchOrder=tibula.ejaSearchOrder
 end
 
 return a;
end


function tibulaJsonInfo() 	--return an alert/info box
 local info="";
 
 if ejaCheck(tibula['ejaActionType']) and ejaCheck(tibula['ejaAction']) then info="alert"..tibula['ejaActionType']..tibulaUCFirst(tibula['ejaAction']) end

 return tibulaInfo(info); 
end



-- Copyright (C) 2007-2019 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Nocturne no.20


function tibulaReset()    --reset global variables
 tibula['ejaSqlLimit']=0;
 tibula['ejaSqlOrder']="";
 tibula['ejaSqlQuery64']="";
 tibula['ejaValues']={};
 tibula['ejaId']=0;
end


function tibulaModuleLua(step,web)	--load lua script from ejaModule 
 tibulaModuleLuaStep=step
 local script=tibulaSqlRun('SELECT lua FROM ejaModules WHERE ejaId=%d;',tibula['ejaModuleId'])
 if ejaString(script) ~= '' then
   local func,err=loadstring(script,tibula['ejaModuleName'])(web)
   if func then 
    func()
   else
    ejaError('[tibula] %s',err)
   end
 end
end


function tibulaSessionRead(ownerId)      --return the ejaSessions array for $ownerId
 if ejaNumber(ownerId) > 0 then
  for k,v in pairs(tibulaSqlMatrix('SELECT name,sub,value FROM ejaSessions WHERE ejaOwner=%d ORDER BY ejaId ASC;',ownerId)) do
   if ejaString(v['sub']) ~= "" then 
    if not tibula[v['name']] then tibula[v['name']]={}; end
    tibula[v['name']][v['sub']]=v['value'];
   else
    tibula[v['name']]=v['value'];
   end
  end
 end
end


function tibulaSessionWrite(ownerId,values)	--write the ejaSession array 
 if ejaNumber(ownerId) > 0 then  
  tibulaSqlRun('SET @ejaOwner=%d;',ownerId);
  tibulaSqlRun('DELETE FROM ejaSessions WHERE ejaOwner=%d;',ownerId);
  for k,v in pairs(values) do
   if type(v) == "table" then
    for kk,vv in pairs(v) do
     if type(vv) ~= "table" then
      tibulaSqlRun("INSERT INTO ejaSessions (ejaLog,ejaOwner,name, sub, value) VALUES ('%s',%d,'%s','%s','%s');",tibulaSqlNow(),ownerId,k,kk,vv);
     end
    end
   else
    tibulaSqlRun('INSERT INTO ejaSessions (ejaLog,ejaOwner,name, value) VALUES ("%s",%d,"%s","%s");',tibulaSqlNow(),ownerId,k,v); 
   end
  end
 else
  tibulaSqlRun('SET @ejaOwner=0;');
 end 
end


function tibulaSessionCode()	--generate new ejaSession id
 local seed=tibula['ejaOwner']

 math.randomseed(os.time()) 
 for i=1,10 do seed=seed..math.random(0,9) end
 
 return ejaSha256(seed);
end


function tibulaTranslate(value)	--return translated value for active module and language or same if not found
 local r;

 if not tibula['ejaTranslation'] then
  tibula['ejaTranslation']={};
  tibula['ejaTranslation']['Eja']='eja';
  for k,v in pairs (tibulaSqlMatrix("SELECT word,translation FROM ejaTranslations where ejaLanguage='%s' AND (ejaModuleId=0 OR ejaModuleId='' OR ejaModuleId=%d) ORDER BY ejaModuleId ASC;",tibula['ejaLanguage'],tibula['ejaModuleId'])) do --must be ORDER ASC to overwrite general translation with module one.
   tibula['ejaTranslation'][v['word']]=v['translation'];
  end
 end
 
 if tibula['ejaTranslation'][value] then
  r=tibula['ejaTranslation'][value]; 
 else 
  r=value; 
 end
 
 return r;
end


function tibulaInfo(value) 	--append value to the info box for alert, info and error messages and return the new infos

 if ejaString(value) ~= "" then
  translation=tibulaTranslate(value)
  if translation  and translation ~= value then
   if not translation:match("^%s*$") then
    tibula.ejaInfo=ejaSprintf('%s%s\n',ejaString(tibula.ejaInfo),translation)
   end
  else
   ejaTrace('[tibula] missing translation: %s %s',tibula.ejaLanguage,value)
  end
 end
 
 return ejaString(tibula.ejaInfo)
end


function tibulaLinkHistory(module,value) 	--manage linking history
 if not tibula['ejaLinkHistory'] or ejaString(module) == "" then tibula['ejaLinkHistory']={}; end
 if not tibula['ejaLinkHistoryOrder'] or ejaString(module) == "" then tibula['ejaLinkHistoryOrder']={}; end

 if ejaCheck(value) then
  tibula['ejaLinkHistory'][module]=value;
  table.insert(tibula['ejaLinkHistoryOrder'],module);
 else
  local bool=0
  table.sort(tibula['ejaLinkHistoryOrder'])
  for k,v in pairs(tibula['ejaLinkHistoryOrder']) do
   if ejaString(module) == v or bool > 0 then 
    tibula['ejaLinkHistory'][v]=nil
    tibula['ejaLinkHistoryOrder'][k]=nil
    bool=1;
   end
  end
 end
 
 return 0; 
end


function tibulaDateSet(value,type)		--convert datetime to dd/mm/yyyy or viceversa
 value=string.gsub(value,"/","-");
 if not value then value="" end
 if not string.find(type,"time") then 
  value=string.sub(value,1,10);
 end
 
 return value;
end


function tibulaUCFirst(value)	--return first letter capitalized value

 if value then
  value=string.gsub(value,"%a", string.upper, 1);
 end

 return value
end


function tibulaModuleExport(name)   --export a tibula module with fields and commands
 local a={}
 local id=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='%s';",name)
 a.name=name
 a.module=tibulaSqlArray("SELECT a.searchLimit,a.sqlCreated,a.power,a.sortList,a.lua,(SELECT x.name FROM ejaModules AS x WHERE x.ejaId=a.parentId) AS parentName FROM ejaModules AS a WHERE ejaId=%s;",id)
 a.field=tibulaSqlMatrix("SELECT translate,matrixUpdate,powerEdit,name,type,powerList,powerSearch,value FROM ejaFields WHERE ejaModuleId=%s;",id)
 a.translation=tibulaSqlMatrix([[SELECT ejaLanguage,word,translation,(SELECT ejaModules.name FROM ejaModules WHERE ejaModules.ejaId=ejaModuleId) AS ejaModuleName FROM ejaTranslations WHERE ejaModuleId=%s OR word='%s';]],id,name)
 a.command={}
 for _,row in next,tibulaSqlMatrix([[SELECT name from ejaCommands WHERE ejaId IN (SELECT ejaCommandId FROM ejaPermissions WHERE ejaModuleId=%s);]],id) do
  a.command[#a.command+1]=row.name
 end
 return a
end


function tibulaModuleImport(a,tableName)	--import a tibula module with fields, commands and permission
 local tableName=tableName or a.name
 local owner=1;
 local id=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='%s';",tableName) or nil
 local parentId=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='%s';",a.module.parentName) 
 if ejaNumber(parentId) < 1 then parentId=2 end
 if ejaNumber(a.module.sqlCreated) > 0 then 
  tibulaSqlTableCreate(tableName);
 end
 if ejaNumber(id) < 1 then
  tibulaSqlRun([[INSERT INTO ejaModules (ejaId,ejaOwner,ejaLog,name,power,searchLimit,lua,sqlCreated,sortList,parentId) VALUES (NULL,%s,'%s','%s','%s','%s','%s','%s','%s','%s');]],
   owner,tibulaSqlNow(),tableName,a.module.power,a.module.searchLimit,a.module.lua,a.module.sqlCreated,a.module.sortList,parentId);
  id=tibulaSqlLastId();
 end
 if ejaNumber(id) > 0 then
  tibulaSqlRun([[DELETE FROM ejaFields WHERE ejaModuleId=%s;]],id)
  for k,v in next,a.field do
   if ejaNumber(a.module.sqlCreated) > 0 then
    tibulaSqlTableColumnCreate(tableName, v.name, v.type)
   end
   tibulaSqlRun([[INSERT INTO ejaFields (ejaId,ejaOwner,ejaLog,ejaModuleId,name,type,value,translate,matrixUpdate,powerSearch,powerList,powerEdit) VALUES (NULL,%s,'%s',%s,'%s','%s','%s','%s','%s','%s','%s','%s');]],
    owner,tibulaSqlNow(),id,v.name,v.type,v.value,v.translate,v.matrixUpdate,v.powerSearch,v.powerList,v.powerEdit)
  end
  local src=ejaSqlRun([[SELECT ejaId FROM ejaModules WHERE name='ejaPermissions';]])
  local dst=ejaSqlRun([[SELECT ejaId FROM ejaModules WHERE name='ejaUsers';]])
  tibulaSqlRun([[DELETE FROM ejaLinks WHERE dstModuleId=%s AND srcModuleId=%s AND srcFieldId IN (SELECT c.ejaId FROM ejaPermissions AS c WHERE c.ejaModuleId=%s);]],dst,src,id)
  tibulaSqlRun([[DELETE FROM ejaPermissions WHERE ejaModuleId=%s;]],id)
  for k,v in next,a.command do
   tibulaSqlRun([[INSERT INTO ejaPermissions (ejaId,ejaOwner,ejaLog,ejaModuleId,ejaCommandId) VALUES (NULL,%s,'%s',%s,(SELECT x.ejaId FROM ejaCommands AS x WHERE x.name='%s' LIMIT 1));]],owner,tibulaSqlNow(),id,v)
   tibulaSqlRun([[INSERT INTO ejaLinks (ejaId,ejaOwner,ejaLog,srcModuleId,srcFieldId,dstModuleId,dstFieldId,power) VALUES (NULL,%s,'%s','%s','%s','%s','%s',1);]],
    owner,tibulaSqlNow(),src,tibulaSqlLastId(),dst,owner);     
  end
  tibulaSqlRun([[DELETE FROM ejaTranslations WHERE ejaModuleId=%d;]],id)
  tibulaSqlRun([[DELETE FROM ejaTranslations WHERE word='%s' AND ejaModuleId < 1;]],tableName)
  for _,row in next,a.translation do
   local tmpId=id
   if ejaString(row.ejaModuleName) ~= tableName then tmpId=0 end
   ejaSqlRun([[INSERT INTO ejaTranslations (ejaId,ejaOwner,ejaLog,ejaModuleId,ejaLanguage,word,translation) VALUES (NULL,%s,'%s','%s','%s','%s','%s');]],owner,tibulaSqlNow(),tmpId,row.ejaLanguage,row.word,row.translation);
  end
 end
 return id
end


-- Copyright (C) 2007-2020 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Prelude Op. 23 No. 5


eja.help.tibulaType='db type (maria|mysql|sqlite3) {maria}'
eja.help.tibulaUsername='db username'
eja.help.tibulaPassword='db password'
eja.help.tibulaHostname='db hostname'
eja.help.tibulaDatabase='db name'

tibulaSqlType=nil
tibulaSqlConnection=nil


function tibulaSqlCheck()
 if not tibulaSqlConnection or not tibulaSqlRun("SELECT COUNT(*) FROM ejaSessions;") then 
  tibulaSqlStart(eja.opt.tibulaType,eja.opt.tibulaUsername,eja.opt.tibulaPassword,eja.opt.tibulaHostname,eja.opt.tibulaDatabase) 
 end
 return tibulaSqlConnection
end


function tibulaSqlStart(sqlType,sqlUsername,sqlPassword,sqlHostname,sqlDatabase)	--start sql connection

 local sqlType=sqlType or eja.opt.sqlType or "maria"
 local sqlUsername=sqlUsername or eja.opt.tibulaUsername or eja.opt.sqlUsername -- eja.opt.sqlxxx deprecated
 local sqlPassword=sqlPassword or eja.opt.tibulaPassword or eja.opt.sqlPassword
 local sqlHostname=sqlHostname or eja.opt.tibulaHostname or eja.opt.sqlHostname
 local sqlDatabase=sqlDatabase or eja.opt.tibulaDatabase or eja.opt.sqlDatabase

 tibulaSqlType=sqlType
 
 if sqlType == "maria" and eja.maria then
  eja.sql=ejaMaria();
 elseif ejaModuleCheck('luasql.'..sqlType) then 
  if sqlType == "sqlite3" then eja.sql=require "luasql.sqlite3" end
  if sqlType == "mysql" then eja.sql=require "luasql.mysql" end
 else
  ejaError('[sql] %s library missing',sqlType)
  return nil
 end

 if eja.sql then 
  if sqlType=="maria" then tibulaSqlConnection=ejaMariaOpen(sqlHostname,3306,sqlUsername,sqlPassword,sqlDatabase); end
  if sqlType=="mysql" then tibulaSqlConnection=eja.sql.mysql():connect(sqlDatabase,sqlUsername,sqlPassword,sqlHostname); end
  if sqlType=="sqlite3" then tibulaSqlConnection=eja.sql.sqlite3():connect(sqlDatabase); end
 end

 if tibulaSqlConnection then 
  ejaDebug('[sql] %s connection open',sqlType) 
  if sqlTable=="maria" or sqlTable=="mysql" then
   tibulaSqlRun("SET SESSION sql_mode = '';")
   tibulaSqlRun("DROP TABLE ejaSessions;");   
   tibulaSqlRun("CREATE TABLE `ejaSessions` (`ejaId` integer NOT NULL AUTO_INCREMENT primary key, `ejaOwner` integer default 0, `ejaLog` datetime default NULL, `name` varchar(255) default NULL, `value` varchar(8192), `sub` varchar(255) default NULL) ENGINE=MEMORY;");     
  end
  if sqlType=="sqlite3" then
   tibulaSqlRun("PRAGMA journal_mode = MEMORY;");
   if ejaString(sqlPassword) ~= "" then tibulaSqlRun("PRAGMA key = '%s';",sqlPassword); end
   tibulaSqlRun("PRAGMA temp_store = MEMORY;");
  end
 else
  ejaError('[sql] %s connection error',sqlType)
 end

 return tibulaSqlConnection;   
end


function tibulaSqlStop()	--stop sql connection
 ejaDebug('[sql] %s connection closed',sqlType)
 if tibulaSqlType=="maria" then return ejaMariaClose(); end
 if tibulaSqlType=="mysql" then return tibulaSqlConnection:close(); end
 if tibulaSqlType=="sqlite3" then return tibulaSqlConnection:close(); end
end


function tibulaSqlMatrix(query,...)	--sql multi rows array
 query=tibulaSqlQuery(query,...);

 local row={}; 
 local rows={};
 if tibulaSqlType == "maria" then
  rows=ejaMariaQuery(query)
  local cols={}
  for rk,rv in next,getmetatable(rows) do
   for rvk,rvv in next,rv do
    if rvk=="name" then cols[#cols+1]=rvv end
   end
  end
  setmetatable(rows,cols)
 else
  local cur=tibulaSqlConnection:execute(query);
  if cur then
   setmetatable(rows,cur:getcolnames(row));
   row=cur:fetch({},"a");
   while row do 
    local a={}
    table.insert(rows,row)
    row=cur:fetch({}, "a");
   end
   cur:close();
  end
 end
 
 return rows;
end


function tibulaSqlArray(query,...)	--sql last row array
 query=tibulaSqlQuery(query,...);
 
 local rowLast={}
 if tibulaSqlType == "maria" then
  for rk,rv in next,ejaMariaQuery(query) do
   rowLast=rv
  end
 else
  local cur=tibulaSqlConnection:execute(query);
  if cur then
   local row=cur:fetch({},"a");
   rowLast=row;
   while row do 
    rowLast=row;
    row=cur:fetch({}, "a");
   end
   cur:close();
  end
 end
    
 return rowLast;
end


function tibulaSqlRun(query,...)	--execute sql command 
 query=tibulaSqlQuery(query,...);

 local r;
 if tibulaSqlType == "maria" then
  rv=ejaMariaQuery(query) 
  if rv then 
   for k,v in next,rv do
    if type(v) == "table" then
     for kk,vv in next,v do r=vv end
    else
     r=v
    end
   end 
  end
 else
  local cur=tibulaSqlConnection:execute(query);
  if type(cur) == "userdata" then
   local row=cur:fetch({},"n");
   if row then 
    r=row[1]
   else 
    r=false; 
   end
  else  
    r=cur;
  end
  if cur and type(cur) ~= "number" then cur:close(); end
 end
 return r;
end


function tibulaSqlLastId()	--retrieve last inserted row id
 if tibulaSqlType == "maria" then return tibulaSqlRun('SELECT LAST_INSERT_ID();'); end
 if tibulaSqlType == "mysql" then return tibulaSqlRun('SELECT LAST_INSERT_ID();'); end
 if tibulaSqlType == "sqlite3" then return tibulaSqlRun('SELECT last_insert_rowid();'); end
end


function tibulaSqlTableCreate(tableName)	--create a new table if it does not exist
 local r=0;
 
 if ejaString(tableName) ~= "" and not tibulaSqlRun('SELECT * FROM %s LIMIT 1;',tableName) then
  local extra="";
  if tibulaSqlType == "maria" then extra=" AUTO_INCREMENT "; end  
  if tibulaSqlType == "mysql" then extra=" AUTO_INCREMENT "; end  
  if tibulaSqlRun('CREATE TABLE %s (ejaId INTEGER %s PRIMARY KEY, ejaOwner INTEGER, ejaLog DATETIME);',tableName,extra) then
   r=1;
  else 
   r=-1;
  end
 end

 return r;
end


function tibulaSqlTableColumnCreate(tableName, columnName, columnType) 	--add a new column field into a table if it does not exist
 local r=0;   
 local dataType=tibulaSqlTableDataType(columnType);

 if ejaString(dataType) ~= "" and not tibulaSqlRun('SELECT %s FROM %s LIMIT 1',columnName,tableName) then
  if tibulaSqlRun('ALTER TABLE %s ADD %s %s;',tableName,columnName,dataType) then
   r=1;
  else
   r=-1;
  end
 end

 return r;
end


function tibulaSqlIncludeList(query,...)   --return a comma separated list of values to be included in IN() clause (only first column will be addded).
 local query=tibulaSqlQuery(query,...);
 local r='';
 local list=""; 
 for rk,rv in next,tibulaSqlMatrix(query) do
  local k,v=next(rv)
  list=list..','..v
 end
 
 return string.sub(list,2);
end


function tibulaSqlNow()   --return actual datetime 
 return os.date('%Y-%m-%d %H:%M:%S');
end


function tibulaSqlUnixTime(value)	--?convert value to unix or sql timestamp
 local r="";
 
 if tibulaSqlType == "sqlite3" then 
  if ejaNumber(value) > 0 then
   r=tibulaSqlRun("SELECT datetime(%d, 'unixepoch');",value);
  else
   r=tibulaSqlRun("SELECT strftime('%%s','%s');",value); 
  end
 end
 
 if tibulaSqlType == "maria" or tibulaSqlType == "mysql" then 
  if ejaNumber(value) > 0 then
   r=tibulaSqlRun("SELECT FROM_UNIXTIME(%d);",value);
  else
   r=tibulaSqlRun("SELECT UNIX_TIMESTAMP('%s');",value); 
  end
 end
 
 return r or 0;
end


function tibulaSqlEscape(data)	--escape data for sql
  return string.gsub(data,"'", "''");
end


function tibulaSqlTableDataType(sType)	--return sql data type syntax for sType data type
 local dType="";

 sType=ejaString(sType)
 if sType=="boolean" 		then dType="INTEGER(1) DEFAULT 0";	end
 if sType=="integer"		then dType="INTEGER DEFAULT 0"; 	end
 if sType=="integerRange"	then dType="INTEGER DEFAULT 0";		end
 if sType=="decimal" 		then dType="DECIMAL(10,2)"; 		end
 if sType=="date" 		then dType="DATE"; 			end
 if sType=="dateRange" 		then dType="DATE"; 			end
 if sType=="time" 		then dType="TIME"; 			end
 if sType=="timeRange" 		then dType="TIME"; 			end
 if sType=="datetime" 		then dType="DATETIME"; 			end
 if sType=="datetimeRange"	then dType="DATETIME"; 			end
 if sType=="text" 		then dType="TEXT";	 		end
 if sType=="hidden"	 	then dType="TEXT"; 			end
 if sType=="view" 		then dType="TEXT"; 			end
 if sType=="file" 		then dType="TEXT"; 			end
 if sType=="select" 		then dType="TEXT"; 			end
 if sType=="sqlValue" 		then dType="TEXT"; 			end
 if sType=="sqlHidden" 		then dType="TEXT"; 			end
 if sType=="sqlMatrix" 		then dType="TEXT"; 			end
 if sType=="textArea" 		then dType="TEXT"; 			end
 if sType=="htmlArea"		then dType="TEXT";	 		end

 return dType;
end


function tibulaSqlQuery(query,...)	--filter sql query 
 argIn=table.pack(...)
 argOut={}
 for k,v in next,argIn do
  if tonumber(k) then
   str=tostring(v)
   argOut[k]=str
  end
 end
 query=string.format(query,table.unpack(argOut))
 
 if not query:upper():match('^SET') and ejaCheck(tibula['ejaOwner']) and ejaCheck(tibula['ejaModuleId']) and not ejaCheck(tibula['ejaModuleName'],"ejaFields") and not ejaCheck(tibula['ejaModuleName'],"ejaSql") and not ejaCheck(tibula['ejaModuleName'],"ejaBackups") then
  query=string.gsub(query,"@ejaOwner",tibula['ejaOwner']);
 end

 ejaTrace('[sql] %s',query)

 return query;
end


function tibulaSqlOwnerList(ownerId)	--return the allowed id list of owners for active module and ownerId
 local moduleId;
 if ejaNumber(tibula['ejaModuleLink']) > 0 and ejaNumber(tibula['ejaModuleChange']) > 0 then moduleId=tibula['ejaModuleChange']; else moduleId=tibula['ejaModuleId']; end

 local groupOwners=tibulaSqlIncludeList("SELECT dstFieldId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaGroups') AND srcFieldId IN (SELECT srcFieldId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaGroups') AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') AND dstFieldId=%d AND srcFieldId IN ( SELECT dstFieldId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaModules') AND srcFieldId=%d AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaGroups') )) AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers');",ownerId,moduleId);

 local ownerTree="";
 local sub=ownerId;
 local deep=10;
 local value="0";
 while ejaNumber(deep) > 0 do
  deep=deep-1;
  value=tibulaSqlIncludeList('SELECT ejaId FROM ejaUsers WHERE ejaOwner IN (%s) AND ejaId NOT IN (%s);',sub,sub);
  if ejaCheck(value) then 
   sub=value; 
   ownerTree=ownerTree..","..sub;   
  else 
   deep=0;
  end
 end
 local a={}
 for v in string.gmatch(ownerId..","..groupOwners..","..ownerTree,"%d+") do 
  if v and not a[v] then 
   a[v]=v; 
   value=v..","..value 
  end
 end
 
 return string.sub(value,1,-2);
end


function tibulaSqlCommandArray(userId, moduleId, actionType)	--return the power ordered list of commands allowed for $actionType, $moduleId and $userId
 local r={}
 local extra=""; 
 local order=""; 
 local linking="";
 local query="";
 
 if ejaCheck(tibula['ejaModuleName'],"ejaLogin") then table.insert(r,"login"); end
 if ejaCheck(tibula['ejaModuleId'],35248) then table.insert(r,"logout"); end
 if ejaCheck(tibula['ejaCommandsArray']) then
  for k,v in pairs(tibula['ejaCommandsArray']) do
   extra=extra.." OR name='"..v.."' ";
   if ejaCheck(v,"searchLink") then table.insert(r,"searchLink"); end
  end
 end 
 if ejaCheck(actionType) then order=" ORDER BY power"..actionType.. " ASC";  end
 if ejaCheck(tibula['ejaLinking']) then linking=" AND linking > 0 ";  end
 query=ejaSprintf("SELECT * FROM ejaCommands WHERE (ejaId IN (SELECT ejaCommandId FROM ejaPermissions WHERE ejaModuleId=%d AND ejaId IN (SELECT srcFieldId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId From ejaModules WHERE name='ejaPermissions') AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') AND dstFieldId=%d)) %s ) %s %s;",moduleId,userId,extra,linking,order)
 for k,v in pairs(tibulaSqlMatrix(query)) do
  local commandName=v['name'];
  if ejaCheck(tibula['ejaAction'],"view") and ejaCheck(commandName,"save") then commandName=""; end
  if ejaCheck(commandName) then
   if ejaCheck(actionType) then
    if ejaCheck(v['power'..actionType]) then table.insert(r,commandName); end
   else 
    table.insert(r,commandName);
   end
  end
 end
 
 return r;
end


function tibulaSqlModuleTree(ownerId,moduleId)	--return path, tree and links array
 local row;
 local id=moduleId;
 local a={}
 a.pathId={}
 a.pathName={}
 a.treeId={}
 a.treeName={} 
 a.linkId={}
 a.linkName={}
 a.historyId={}
 a.historyName={}

 --path
 while id do
  row=tibulaSqlArray("SELECT ejaId,parentId,name FROM ejaModules WHERE ejaId=%d;",id);
  id=nil;
  if ejaTableCount(row) > 0 and tibulaSqlRun("SELECT ejaId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaPermissions') AND srcFieldId IN (SELECT ejaId FROM ejaPermissions WHERE ejaModuleId=%d) AND dstFieldId=%d AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') LIMIT 1;",row.ejaId,ownerId) then
   table.insert(a.pathId,row.ejaId)
   table.insert(a.pathName,row.name)
   if ejaNumber(row.parentId) > 0 then
    id = row.parentId
   end
  end
 end
 --tree 
 row=tibulaSqlMatrix("SELECT ejaId,name FROM ejaModules WHERE parentId=%d ORDER BY power ASC;",moduleId);
 if ejaTableCount(row) == 0 then
  if ejaTableCount(a.pathId) == 0 then
   row=tibulaSqlMatrix("SELECT ejaId,name FROM ejaModules WHERE parentId=0 OR parentId='' AND ejaId != %d ORDER BY power ASC;",moduleId);
  end
 end
 if ejaTableCount(row) > 0 then
  for k,v in next,row do
   if tibulaSqlRun("SELECT ejaId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaPermissions') AND srcFieldId IN (SELECT ejaId FROM ejaPermissions WHERE ejaModuleId=%d) AND dstFieldId=%d AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') LIMIT 1;",v.ejaId,ownerId) then
    table.insert(a.treeId,v.ejaId);
    table.insert(a.treeName,v.name);
   end
  end
 end
 --links
 if ejaNumber(tibula.ejaId) > 0 then
  for k,v in next,tibulaSqlMatrix('SELECT srcModuleId,(SELECT name FROM ejaModules WHERE ejaId=srcModuleId) AS srcModuleName FROM ejaModuleLinks WHERE dstModuleId=%d ORDER BY power ASC;',moduleId) do 
   if (ejaTableCount(tibula.ejaLinkHistory) == 0 or ejaString(tibula.ejaLinkHistory[v.srcModuleId]) == "") and tibulaSqlRun("SELECT ejaId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaPermissions') AND srcFieldId IN (SELECT ejaId FROM ejaPermissions WHERE ejaModuleId=%d) AND dstFieldId=%d AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') LIMIT 1;",v.srcModuleId,ownerId) then
    if v.srcModuleName ~= "ejaFiles" then
     table.insert(a.linkId,v.srcModuleId);
     table.insert(a.linkName,v.srcModuleName);
    end
   end
  end
 end
 
 if ejaTableCount(tibula.ejaLinkHistory) > 0 then
  for k,v in next,tibula.ejaLinkHistory do
   if ejaString(k) ~= ejaString(moduleId) and ejaString(v) ~= "" then	
    table.insert(a.historyId,k);
    table.insert(a.historyName,tibulaTranslate(tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d;',k)));
   end 
  end 
 end
 
 return a;
end


function tibulaSqlFieldsMatrix(moduleId, actionType) 	--return an array with rowName,rowType,rowValue, rowArray of moduleName for actionType
 local a={};
 local t="";
 local matrix=0;
 
 if ejaCheck(actionType,"Matrix") then actionType="List"; matrix=1; end 
 
 for k,v in pairs (tibulaSqlMatrix("SELECT * FROM ejaFields WHERE ejaModuleId=%d AND power%s>0 AND power%s!='' ORDER BY power%s ASC",moduleId,actionType,actionType,actionType)) do 
  if ejaCheck(tibula['ejaAction'],"view") then t="view"; else t=v['type']; end
  if ejaCheck(matrix,1) and ejaCheck(v['matrixUpdate']) then 
   t="matrix" 
  end
  if ejaCheck(v['ejaGroup']) and ejaCheck(tibula['ejaActionType'],"Edit") then
   if not tibulaSqlRun("SELECT ejaId FROM ejaLinks WHERE srcModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaGroups') AND dstModuleId=(SELECT ejaId FROM ejaModules WHERE name='ejaUsers') AND dstFieldId=%d AND srcFieldId=%d LIMIT 1;",tibula['ejaOwner'],v['ejaGroup']) then
    t="view";
   end 
  end
  local rowName=v['name'];
  local rowType=t;
  local rowValue=""
  local rowArray={}
  if tibula.ejaValues and tibula['ejaValues'][rowName] then rowValue=tibula['ejaValues'][rowName]; end
  if ejaCheck(v['type'],"select") then rowArray=tibulaSelectToArray(v['value']); end
  if ejaCheck(v['type'],"sqlMatrix") then rowArray=tibulaSelectSqlToArray(v['value']); end
  if ejaCheck(v['type'],"sqlValue") or ejaCheck(v['type'],"sqlHidden") then rowValue=tibulaSqlRun(v['value']); end
  if ejaCheck(v['type'],"sqlTable") then rowArray=tibulaSqlMatrix(v['value']); end
  if ejaCheck(rowType,"view") then 
   if ejaCheck(rowArray) then rowValue=rowArray[ tibula['ejaValues'][rowName] ]; end
   if ejaCheck(v['type'],"password") then rowValue="********"; end
  end
  if ejaCheck(v['translate']) then rowValue=tibulaTranslate(rowValue); end
  table.insert(a, { name=rowName; type=rowType; value=rowValue; values=rowArray }); 
 end

 return a;
end


function tibulaSqlSearchMatrix(query,moduleId) 	--return an associative array for the sql query on module or 0, and set total retrieved rows on tibula['ejaSqlCount'] and total (no limit) rows on tibula['ejaSqlCountTotal']
 local y=0;
 local a={};
 local head={};
 
 if ejaCheck(moduleId) then
  head=tibulaSqlSearchHeader(query,moduleId);
  query=head[1]['query'];
 end

 local sql=tibulaSqlMatrix(query);
 
 if ejaCheck(sql) then
  for k,v in pairs(sql) do
   setmetatable(v,getmetatable(sql))
   table.insert(a,tibulaSqlSearchRowFilter(head,v))
   y=y+1
  end
  setmetatable(a,getmetatable(sql))
 end
 tibula['ejaSqlCountTotal']=0;
 local x="";
 local moduleName=tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d',moduleId);
 if ejaCheck(moduleName) then x=string.find(query,"FROM "..moduleName.." WHERE"); end
 if ejaCheck(x) then
  local queryCountFrom=string.sub(query,x,-1);
  local queryCount=ejaSprintf('SELECT COUNT(*) %s',queryCountFrom)
  if ejaCheck(queryCount) then
   local k,l=1,1;
   while l do 
    k,l=string.find(string.sub(queryCount,l),"ORDER BY") 
    if ejaCheck(l) then queryCountLimit=l end
   end
   if ejaCheck(queryCountLimit) then 
    queryCount=string.sub(queryCount,1,queryCountLimit-string.len("ORDER BY"))
    tibula['ejaSqlCountTotal']=tibulaSqlRun(queryCount);
   end
  end
 end
 tibula['ejaSqlCount']=y;

 return a;
end


function tibulaSqlSearchHeader(query,moduleId) 	--return an associative array with the possible values for each columns and the "right" query to execute. 
 local head={};

 if ejaCheck(moduleId) then
  for k,v in pairs(tibulaSqlMatrix("SELECT * FROM ejaFields WHERE ejaModuleId='%s' AND powerList!='' AND powerList>0 ORDER BY powerList;",moduleId)) do
   head[v['name']]={}
   if ejaCheck(v['type'],"boolean") then 
    head[v['name']]['value']={}
    head[v['name']]['value']['0']="FALSE";
    head[v['name']]['value']['1']="TRUE";
   end	
   if ejaCheck(v['type'],"select") then 
    head[v['name']]['value']=tibulaSelectToArray(v['value']); 
   end	
   if ejaCheck(v['type'],"sqlMatrix") then 
    head[v['name']]['value']=tibulaSelectSqlToArray(v['value']); 
   end
   if ejaCheck(v['type'],"sqlValue") or ejaCheck(v['type'],"sqlHidden") then 
    query=string.gsub(query,v['name'], ejaSprintf('(%s) AS %s',v['value'],v['name']) ); 
   end
   if ejaCheck(v['translate']) then head[v['name']]['translation']=v['translate'] else head[v['name']]['translation']=0; end
  end
 end
 if not ejaCheck(head[1]) then head[1]={} end
 head[1]['query']=query;
 
 return head;
end


function tibulaSqlSearchRowFilter(head,row) 	--return filtered row with translation and subQuery substitution if needed.
 local a={};
 local value="";
 
 for k,v in ipairs(getmetatable(row)) do
  value=row[v]

  if ejaCheck(head[v]) and ejaCheck(head[v]['value']) then --if the v name begins with ejaId use ejaId as v for the value to search for.
   if ejaCheck(string.sub(v,1,5),"ejaId") then 
    value=head[v]['value'][a['ejaId']]; 
   else 
    value=head[v]['value'][row[v]];
    if not value then
     for k1,v1 in next,head[v]['value'] do
      if ejaString(k1) == ejaString(row[v]) then
       value=v1
      end
     end
    end 
   end
  end
  
  if ejaCheck(k,1) then 
   a[v]=value; 
  else 
   if head and head[v] and head[v]['translation'] then a[v]=tibulaTranslate(value);  else  a[v]=value; end
  end
  
 end

 return a;
end


function tibulaSelectSqlToArray(value)   --convert an sql query to bidimensional matrix for selectBox
 local a={};
 local ai={}
 local i,z=0,0;
 
 local queryName,queryValue=value:match('^%w+[ ]*(%w+),(%w+)')
 
 for k,v in pairs(tibulaSqlMatrix(value)) do 
  k1,v1=next(v);
  k2,v2=next(v,k1);
  if v1 and v2 then
   if k1 == queryName then 
    table.insert(ai,v1)
    a[v1]=v2
   else
    table.insert(ai,v2)
    a[v2]=v1
   end
  end
 end
 setmetatable(a,ai);

 return a;
end


function tibulaSelectToArray(value)      --convert a "|" separated list of "\n" delimited rows to array for selectBox
 local a={}
 local ai={}
 local i=0;
 
 value=string.gsub(value,"\r","")
 
 if (string.find(value,"%|")) then
  for k,v in string.gmatch(value,"([^%|%\n]*)%|([^%\n]*)") do 
   a[k]=v; 
   table.insert(ai,k);
   end
 else 
  for k,v in string.gmatch(value,"([^\n]*)") do 
   a[k]=k; 
   if i == 0 then i=1; table.insert(ai,k); else i=0; end
  end
 end
 setmetatable(a,ai);
 
 return a;                      
end


--deprecated functions
function ejaSqlArray(query,...) return tibulaSqlArray(query,...); end
function ejaSqlEscape(data) return tibulaSqlEscape(data); end
function ejaSqlIncludeList(query,...) return tibulaSqlIncludeList(query,...); end
function ejaSqlLastId() return tibulaSqlLastId(); end
function ejaSqlMatrix(query,...) return tibulaSqlMatrix(query,...); end
function ejaSqlNow() return tibulaSqlNow(); end
function ejaSqlQuery(query,...) return tibulaSqlQuery(query,...); end
function ejaSqlRun(query,...) return tibulaSqlRun(query,...); end
function ejaSqlStart(sqlType,sqlUsername,sqlPassword,sqlHostname,sqlDatabase) return tibulaSqlStart(sqlType,sqlUsername,sqlPassword,sqlHostname,sqlDatabase); end
function ejaSqlStop() return tibulaSqlStop(); end
function ejaSqlTableColumnCreate(tableName, columnName, columnType) return tibulaSqlTableColumnCreate(tableName, columnName, columnType); end
function ejaSqlTableCreate(tableName) return tibulaSqlTableCreate(tableName); end
function ejaSqlTableDataType(sType) return tibulaSqlTableDataType(sType); end
function ejaSqlUnixTime(value) return tibulaSqlUnixTime(value); end
-- Copyright (C) 2007-2019 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Polonaise héroïque


function tibulaTableStart()	--set default tibula table value
 tibula={};
 tibula.ejaDefaultLanguage="en";
 tibula.ejaDefaultSearchStep=15;
 tibula.ejaDefaultSearchOrder="ejaLog DESC";
 tibula.ejaCommandsArray={}
 tibula.ejaHttpHeaders={}
 tibula.ejaSqlType=tibulaSqlType;
 tibula.ejaLanguage=tibula.ejaLanguage or tibula.ejaDefaultLanguage;
 tibula.path=eja.opt.tibulaPath or eja.pathVar..'/tibula/'
end


function tibulaTableImport(a)	--import data into tibula table
 for key,value in next,a do
  if type(value) ~= "table" then 
   key=ejaUrlDecode(key) 
   value=ejaUrlDecode(value) 
  else
   key=ejaString(key)
   value=ejaString(value)
  end

  if key == "ejaId" then tibula.ejaId=value;  end
  if key == "ejaAction" then tibula.ejaAction=value; end
  if key == "ejaSession" then tibula.ejaSession=value; end
  if key == "ejaModuleId" then tibula.ejaModuleId=value; end
  if key == "ejaLanguage" then tibula.ejaLanguage=value; end
  if key == "ejaLinkPower" then tibula.ejaLinkPower=value; end
  if key == "ejaModuleName" then tibula.ejaModuleName=value; end
  if key == "ejaSearchStep" then tibula.ejaSearchStep=value; end
  if key == "ejaModuleLink" then tibula.ejaModuleLink=value; end
  if key == "ejaSearchLimit" then tibula.ejaSearchLimit=value; end
  if key == "ejaModuleChange" then tibula.ejaModuleChange=value; end
  if key == "ejaModuleLinkBack" then tibula.ejaModuleLinkBack=value; end
  if key == "ejaOut" then --xhtml/xml/json
   tibula.ejaOut=value; 
   if ejaString(value) == "json" then tibula.ejaOutSession=0; end
  end
  if key == "ejaOutSession"	then tibula.ejaOutSession=value; end

  check=key:match('^ejaAction%[(.-)%]$')
  if  check then tibula.ejaAction=check end 
  if key == "ejaAction" then tibula.ejaAction=value; end

  if key:match("^ejaId%[") then
   if not tibula.ejaIdArray then tibula.ejaIdArray={}; end
   if ejaNumber(tibula.ejaId) < 1 then tibula.ejaId=value; end
   table.insert(tibula.ejaIdArray,value)
  end 
  if key == "ejaId" and type(value) == 'table' then 
   tibula.ejaIdArray=value; 
   if ejaNumber(tibula.ejaId) < 1 then _,tibula.ejaId=next(value); end   
  end  

  k,v=key:match("^ejaLinkPower%[(.-)%]%[(.-)%]$")
  if k and v then
   if type(tibula.ejaLinkPower) ~= "table" then tibula.ejaLinkPower={} end
   tibula.ejaLinkPower[k]=v.."."..value
  end
  if key == "ejaLinkPower" and type(value) == 'table' then tibula.ejaLinkPower=value; end
  
  check=key:match('^ejaSearchOrder%[(.-)%]$')
  if check and ejaString(value) ~= "" then
   if type(tibula.ejaSearchOrder) ~= "table" then tibula.ejaSearchOrder={} end
   tibula.ejaSearchOrder[check]=value; 
  end 
  if key == "ejaSearchOrder" and type(value) == 'table' then tibula.ejaSearchOrder=value; end
  
  check=key:match('^ejaValues%[(.-)%]$')
  if check then 
   if type(tibula.ejaValues) ~= "table" then tibula.ejaValues={} end
   k,v=check:match('^(.-)%]%[(.-)$')
   if k and v then 
    tibula.ejaValues[k]=v.."."..value
   else 
    k,v=check:match('^(.-)%.(.-)$')
    if k and v then
     tibula.ejaValues[check]=value;
     if ejaString(value) ~= "" then tibula.ejaValues[k]=value; end
    else
     tibula.ejaValues[check]=value
    end
   end
  end
  if key == "ejaValues" and type(value) == 'table' then tibula.ejaValues=value; end
  
  if ejaNumber(tibula.ejaId) == 0 and tibula.ejaValues and tibula.ejaValues.ejaId then
   tibula.ejaId=tibula.ejaValues.ejaId
  end

 end 
end


function tibulaTableRun(web)	--main tibula engine 
 if ejaString(tibula.ejaModuleName) ~= "" then tibula.ejaModuleId=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='%s';",tibula.ejaModuleName) end
 if ejaNumber(tibula.ejaModuleId) < 1 then tibula.ejaModuleId=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='eja';") end
 if ejaNumber(tibula.ejaModuleId) < 1 then tibula.ejaModuleId=1 end
 tibula.ejaModuleId=ejaNumber(tibula.ejaModuleId);
 tibula.ejaId=ejaNumber(tibula.ejaId)
 tibula.ejaValues=ejaTable(tibula.ejaValues)
 if not tibula.ejaIdArray and tibula.ejaId > 0 then 
  tibula.ejaIdArray=ejaTable(); 
  table.insert(tibula.ejaIdArray,tibula.ejaId) 
 end
 if not tibula.ejaOut then tibula.ejaOut="xhtml"; end
 if not tibula.ejaOutSession then tibula.ejaOutSession=1; end

 --login, set a random session value and retrieve defaultModuleId 
 if ejaString(tibula.ejaAction) == "login" and ejaString(tibula.ejaValues.username) ~= "" and ejaString(tibula.ejaValues.password) ~= "" then 
  tibula.ejaOwner=tibulaSqlRun("SELECT ejaId FROM ejaUsers WHERE username='%s' AND CASE WHEN LENGTH(password) = 64 THEN password='%s' ELSE password='%s' END;",tibula.ejaValues.username,ejaSha256(tibula.ejaValues.password),tibula.ejaValues.password);
  if ejaNumber(tibula.ejaOwner) > 0 then
   tibulaSqlRun('DELETE FROM ejaSessions WHERE ejaOwner=%d;',tibula.ejaOwner);
   tibulaSqlRun("UPDATE ejaUsers SET ejaSession='%s' WHERE ejaId='%d';",tibulaSessionCode(),tibula.ejaOwner); 
   local row=tibulaSqlArray('SELECT * FROM ejaUsers WHERE ejaId=%d;',tibula.ejaOwner);
   tibula.ejaSession=ejaString(row.ejaSession);
   tibula.ejaModuleId=ejaNumber(row.defaultModuleId);
  end
 end  

 --Session managment
 if ejaString(tibula.ejaSession) ~= "" then
  --set ejaOwner
  local user=tibulaSqlArray("SELECT * FROM ejaUsers WHERE ejaSession='%s';",tibula.ejaSession);
  if ejaTableCount(user) > 0 then
   tibula.ejaOwner=ejaNumber(user.ejaId);
   --set ejaLanguage
   if user.ejaLanguage then tibula.ejaLanguage=ejaString(user.ejaLanguage); end
   --fill tibula from ejaSessions
   if ejaNumber(tibula.ejaOwner) > 0 and ejaNumber(tibula.ejaOutSession) == 1 and ejaString(tibula.ejaAction) ~= "csvExport" and ejaString(tibula.ejaAction) ~= "xmlExport" then 
    tibulaSessionRead(tibula.ejaOwner); 
   end 
  --fill eja with the list and the array of other owners data enabled views
   tibula.ejaOwnerList=tibulaSqlOwnerList(tibula.ejaOwner); 
   tibula.ejaOwners=ejaTable(tibula.ejaOwners)
   for v in string.gmatch(tibula.ejaOwnerList,"%d+") do tibula.ejaOwners[v]=v; end 
  else 
   tibula.ejaOwner=0;
  end
 else 
  tibula.ejaOwner=0;
 end 
 
 --Security checks
 if ejaString(tibula.ejaAction) =="logout" then
  --logout 
  if ejaNumber(tibula.ejaOwner) > 0 then tibulaSqlRun("UPDATE ejaUsers SET ejaSession='' WHERE ejaId=%d;",tibula.ejaOwner); end
  tibula.ejaSession="";
  tibula.ejaOwner=0;   
  tibulaReset();
  tibula.ejaLinkHistory={};
  tibula.ejaLinkModuleId=0;
  tibula.ejaLinkFieldId=0; 
 end
 
 -- ejaSession semaphore
 if ejaNumber(tibula.ejaOwner) < 1 then 
  tibula.ejaModuleId=tibulaSqlRun("SELECT ejaId FROM ejaModules WHERE name='ejaLogin'");
  tibula.ejaModuleName="ejaLogin";
  tibula.ejaLanguage=tibula.ejaDefaultLanguage;
  tibula.ejaSession="";
  tibulaInfo("ejaNotAuthorized");
  
 else 	-- authorized
 
  --Module selection 
  if ejaString(tibula.ejaAction) == "query" then tibula.ejaModuleChange=tibula.ejaModuleId; end
  if ejaNumber(tibula.ejaModuleChange) > 0 then      --if changing module reset sql order,limit,query..
   if tibula.ejaLinkHistory and tibula.ejaModuleChange == 35248 then tibulaLinkHistory(0,0) end --force ejaLinkHistory reset if on root module
   tibula.ejaModuleId=tibula.ejaModuleChange;
   tibulaReset();   
  end

  --Linking managment
  if ejaString(tibula.ejaModuleLink) ~= "" and ejaNumber(tibula.ejaModuleChange) > 0 then	--link begin
   tibula.ejaModuleId=tibula.ejaModuleChange;
   tibulaLinkHistory(tibula.ejaModuleLink:match('([%d]*)%.([%d]*)'));	--add to ejaLinkHistory
   tibula.ejaAction="searchLink";
   table.insert(tibula.ejaCommandsArray,"searchLink");
  end
  --linking back
  if ejaNumber(tibula.ejaModuleLinkBack) > 0 and ejaTableCount(tibula.ejaLinkHistory) > 0 then	--link back
   tibulaReset();
   tibula.ejaId=ejaNumber(tibula.ejaLinkHistory[tibula.ejaModuleLinkBack]);
   tibula.ejaModuleId=tibula.ejaModuleLinkBack;
   tibula.ejaAction="edit";
   tibulaLinkHistory(tibula.ejaModuleId,0);	--reset this ejaLinkHistory
  end
  --linking history
  if ejaTableCount(tibula.ejaLinkHistoryOrder) > 0 then	--if linking check link type 
   table.sort(tibula.ejaLinkHistoryOrder);
   for k,v in next,tibula.ejaLinkHistoryOrder do
    if ejaNumber(v) > 0 then
     tibula.ejaLinkModuleId=v
     tibula.ejaLinkFieldId=tibula.ejaLinkHistory[v]
    end
   end
   if ejaNumber(tibula.ejaId) < 1 then tibula.ejaLinking=1; end
   if ejaNumber(tibula.ejaLinkModuleId) > 0 then tibula.ejaLinkingField=ejaString(tibulaSqlRun('SELECT srcFieldName FROM ejaModuleLinks WHERE dstModuleId=%d AND srcModuleId=%d',tibula.ejaLinkModuleId,tibula.ejaModuleId)); end
  end   

  --Fill or update ejaModuleName
  if ejaNumber(tibula.ejaModuleId) > 0 then tibula.ejaModuleName=tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d;',tibula.ejaModuleId) or 'eja'; end
   
  --Fill ejaCommands
  tibula.ejaCommands={}
  for k,v in next,tibulaSqlCommandArray(tibula.ejaOwner,tibula.ejaModuleId,"") do 
   tibula.ejaCommands[v]=k; 
  end

  --run lua script for this ejaModuleId and save tibula into ejaSessions
  tibulaModuleLua(0,web);
  tibulaSessionWrite(tibula.ejaOwner,tibula);

  --Actions engine, runs only if ejaAction is in ejaSqlCommandList
  if ejaString(tibula.ejaAction) ~= "" and ejaString(tibula.ejaCommands[tibula.ejaAction]) ~= "" then

   --update matrix
   if ejaString(tibula.ejaAction) == "update" then
    tibula.ejaMatrix=1;
    tibula.ejaAction="search"; 
    if ejaNumber(tibula.ejaId) > 0 then 
     local validFields={}
     for k,v in next,tibulaSqlFieldsMatrix(tibula.ejaModuleId, "Matrix") do
      if v.name and ejaString(v.type) == "matrix" then 
       for kk,vv in next,tibula.ejaIdArray do
        if tibula.ejaValues[v.name.."."..vv] then
         tibulaSqlRun("UPDATE %s SET %s='%s' WHERE ejaId=%d AND ejaOwner IN (%s)",tibula.ejaModuleName,v.name,tibula.ejaValues[v.name.."."..vv],vv,tibula.ejaOwnerList)
        end
       end
      end
     end
    end 
   end
 
   --link and unlink
   if (ejaString(tibula.ejaAction) == "link" or ejaString(tibula.ejaAction) == "unlink") and ejaTableCount(tibula.ejaIdArray) > 0 then
    for k,v in next,tibula.ejaIdArray do
     local linkPower=0;
     local linkId=0;
     if ejaString(v) ~= "" and tibula.ejaLinkPower[v] then
      linkId,linkPower=tibula.ejaLinkPower[v]:match('(%d+)%.(%d+)')
      if ejaString(tibula.ejaAction) == "link" then 
       if ejaNumber(linkPower) < 1 then linkPower=1 end
       if ejaNumber(linkId) > 0 then
        tibulaSqlRun('UPDATE ejaLinks SET power=%d WHERE ejaId=%d AND ejaOwner IN (%s);',linkPower,linkId,tibula.ejaOwnerList); 
       else 
        tibulaSqlRun("INSERT INTO ejaLinks (ejaOwner,ejaLog,srcModuleId,srcFieldId,dstModuleId,dstFieldId,power) VALUES (%d,'%s',%d,%d,%d,%d,%d);",tibula.ejaOwner,tibulaSqlNow(),tibula.ejaModuleId,v,tibula.ejaLinkModuleId,tibula.ejaLinkFieldId,linkPower);     
       end
      end
     if ejaString(tibula.ejaAction) == "unlink" then tibulaSqlRun('DELETE FROM ejaLinks WHERE ejaId=%d AND ejaOwner IN (%s);',linkId,tibula.ejaOwnerList); end
     end
    end 
    tibula.ejaAction="searchLink";  
    tibula.ejaLinking=2; 
   end 

   --edit and view
   if ejaNumber(tibula.ejaId) > 0 and (ejaString(tibula.ejaAction) == "edit") or ejaString(tibula.ejaAction) == "view" then 
    tibula.ejaValues=tibulaSqlArray('SELECT * FROM %s WHERE ejaId=%d;',tibula.ejaModuleName,tibula.ejaId);
   end
  
   --new and copy
   if ejaString(tibula.ejaAction) == "new" or ejaString(tibula.ejaAction) == "copy" then
    tibula.ejaValues.ejaLog=tibulaSqlNow();
    tibula.ejaValues.ejaOwner=ejaNumber(tibula.ejaOwner);
    tibulaSqlRun("INSERT INTO %s (ejaId,ejaOwner,ejaLog) VALUES (NULL,'%d','%s');",tibula.ejaModuleName,tibula.ejaValues.ejaOwner,tibula.ejaValues.ejaLog);
    tibula.ejaIdCopied=tibula.ejaId;
    tibula.ejaId=tibulaSqlLastId();
    if ejaString(tibula.ejaAction) == "copy" then --copy ejaLinks and ejaFiles
     tibulaSqlRun("INSERT INTO ejaLinks (ejaId,ejaOwner,ejaLog,srcModuleId,srcFieldId,dstModuleId,dstFieldId,power) SELECT NULL,%d,'%s',srcModuleId,srcFieldId,dstModuleId,%d,power FROM ejaLinks WHERE dstModuleId=%d AND dstFieldId=%d;",tibula.ejaOwner,tibulaSqlNow(),tibula.ejaId,tibula.ejaModuleId,tibula.ejaIdCopied);
     tibula.ejaLinkFieldId=tibula.ejaId;
    end 
   end

   --save and copy (must be after "new" for "copy" to work). update data also if ejaAction=new and we are in batch mode (xml) 
   if ejaTableCount(tibula.ejaValues) > 0 and ( 
    (ejaString(tibula.ejaAction) == "save" or ejaString(tibula.ejaAction) == "copy") or 
    (ejaNumber(tibula.ejaOutSession) == 0 and ejaString(tibula.ejaAction) == "new") or 
    (ejaString(tibula.ejaAction) == "searchLink" and ejaNumber(tibula.ejaId) > 0) 
   ) then
    if ejaString(tibula.ejaModuleName) == "ejaModules" and (tibula.ejaAction == "save" or (ejaNumber(tibula.ejaOutSession) == 0 and tibula.ejaAction =="new")) then	-- create table on database and add permissions
     if ejaNumber(tibula.ejaValues.sqlCreated) > 0 then
      local tableCreate=tibulaSqlTableCreate(tibula.ejaValues.name);  
      if ejaNumber(tableCreate) > 0 then tibulaInfo("ejaSqlModuleCreated"); end
      if ejaNumber(tableCreate) < 0 then tibulaInfo("ejaSqlModuleNotCreated"); end
     end
     if ejaNumber(tibulaSqlRun('SELECT COUNT(*) FROM ejaPermissions WHERE ejaModuleId=%d;',tibula.ejaId)) == 0 then
      if ejaNumber(tibula.ejaValues.sqlCreated) > 0 then
       tibulaInfo("ejaModuleSqlPermissionsCreated");
       tibulaSqlRun("INSERT INTO ejaPermissions SELECT NULL,%d,'%s',%d,ejaId FROM ejaCommands WHERE defaultCommand>0",tibula['ejaOwner'],tibulaSqlNow(),tibula['ejaId']);
      else
       tibulaInfo("ejaModuleContainerPermissionsCreated");
       tibulaSqlRun("INSERT INTO ejaPermissions SELECT NULL,%d,'%s',%d,ejaId FROM ejaCommands WHERE name='logout'",tibula['ejaOwner'],tibulaSqlNow(),tibula['ejaId']);
      end
       tibulaSqlRun("INSERT INTO ejaLinks (ejaId,ejaOwner,ejaLog,srcModuleId,srcFieldId,dstModuleId,dstFieldId,power) SELECT NULL,1,'%s',(SELECT ejaId FROM ejaModules WHERE name='ejaPermissions'),ejaId,(SELECT ejaId FROM ejaModules WHERE name='ejaUsers'),%d,2 from ejaPermissions where ejaModuleId=%d;",tibulaSqlNow(),tibula.ejaOwner,tibula.ejaId);      
     end
    end
    if ejaNumber(tibula.ejaId) < 1 then 
     tibulaSqlRun("INSERT INTO %s (ejaId,ejaOwner,ejaLog) VALUES (NULL,'%d','%s');",tibula.ejaModuleName,tibula.ejaOwner,tibulaSqlNow());
     tibula.ejaId=tibulaSqlLastId();
    else    
     if not tibulaSqlRun("SELECT ejaId FROM %s WHERE ejaId=%d;",tibula.ejaModuleName,tibula.ejaId) then
      tibulaSqlRun("INSERT INTO %s (ejaId,ejaOwner,ejaLog) VALUES (%d,%d,'%s');",tibula.ejaModuleName,tibula.ejaId,tibula.ejaOwner,tibulaSqlNow());
     end 
    end
    for k,v in next,tibula.ejaValues do
     local t=tibulaSqlRun("SELECT type FROM ejaFields WHERE ejaModuleId=%d AND name='%s';",tibula.ejaModuleId,k);
     if t then 
      if string.find("#date#dateRange#time#timeRange#datetime#datetimeRange#",t) then v=tibulaDateSet(v,t); end
      if t == "password" and string.len(v) ~= 64 then v=ejaSha256(v) end
     end
     tibulaSqlRun("UPDATE %s SET %s='%s' WHERE ejaId=%d AND ejaOwner IN (%s);",tibula.ejaModuleName,k,tibulaSqlEscape(v),tibula.ejaId,tibula.ejaOwnerList);
    end
    tibula.ejaValues=tibulaSqlArray('SELECT * FROM %s WHERE ejaId=%d;',tibula.ejaModuleName,tibula.ejaId);
    
    --create table column
    if ejaString(tibula.ejaModuleName) == "ejaFields" and ejaString(tibula.ejaValues.name) ~= "" and ejaString(tibula.ejaValues.type) ~= "" and ejaNumber(tibula.ejaValues.ejaModuleId) > 0 then
     local fieldCreate=tibulaSqlTableColumnCreate(tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d;',tibula.ejaValues.ejaModuleId), tibula.ejaValues.name, tibula.ejaValues.type)
     if ejaNumber(fieldCreate) > 0 then tibulaInfo("ejaSqlFieldCreated"); end
     if ejaNumber(fieldCreate) < 0 then tibulaInfo("ejaSqlFieldNotCreated"); end
    end
    
   end

   --delete
   if ejaString(tibula.ejaAction) == "delete" and ejaTableCount(tibula.ejaIdArray) > 0 then
    for k,v in next,tibula.ejaIdArray do 
     if ejaString(tibula.ejaModuleName) == "ejaModules" then	
      local tableName=tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d AND ejaOwner IN (%s);',v,tibula.ejaOwnerList);
      if ejaString(tableName) ~= "" then
       tibulaSqlRun('DROP TABLE %s;',tableName);
       tibulaSqlRun('DELETE FROM ejaFields WHERE ejaModuleId=%d;',v);
       tibulaSqlRun('DELETE FROM ejaPermissions WHERE ejaModuleId=%d;',v);
       tibulaSqlRun('DELETE FROM ejaHelps WHERE ejaModuleId=%d;',v);
       tibulaSqlRun('DELETE FROM ejaTranslations WHERE ejaModuleId=%d;',v);
       tibulaSqlRun('DELETE FROM ejaModuleLinks WHERE dstModuleId=%d;',v);
       tibulaInfo("ejaSqlModuleDeleted");
      end
     end
     tibulaSqlRun('DELETE FROM %s WHERE ejaId=%d AND ejaOwner IN (%s);',tibula.ejaModuleName,v,tibula.ejaOwnerList); 
     tibulaSqlRun('DELETE FROM ejaLinks WHERE (dstModuleId=%d AND dstFieldId=%d) OR (srcModuleId=%d AND srcFieldId=%d) AND ejaOwner IN (%s);',tibula.ejaModuleId,v,tibula.ejaModuleId,v,tibula.ejaOwnerList);
    end
    tibula.ejaAction="search";
   end 

   --search engine
   if ejaString(tibula.ejaAction) == "searchLink" then tibulaReset(); end
   if string.find("#search#previous#next#list#searchLink#csvExport#xmlExport#",ejaString(tibula.ejaAction)) then
    local sql="";
    local sqlType={};
    tibula.ejaActionType="List";
    --check ejaSearchStep (how many rows per page) and ejaSearchLimit (row limit begin)
    if ejaNumber(tibula.ejaSearchStep) < 1 then tibula.ejaSearchStep=tibulaSqlRun('SELECT searchLimit FROM ejaModules WHERE ejaId=%d;',tibula.ejaModuleId); end
    if ejaNumber(tibula.ejaSearchStep) < 1 then tibula.ejaSearchStep=tibula.ejaDefaultSearchStep; end
    if ejaNumber(tibula.ejaSearchLimit) > 0 then tibula.ejaSqlLimit=tibula.ejaSearchLimit; end
    if ejaNumber(tibula.ejaSqlLimit) < 1 then tibula.ejaSqlLimit=0 end
    --previous and next
    if ejaString(tibula.ejaAction) == "previous" then tibula.ejaSqlLimit=tibula.ejaSqlLimit-tibula.ejaSearchStep; end
    if ejaString(tibula.ejaAction) == "next" then tibula.ejaSqlLimit=tibula.ejaSqlLimit+tibula.ejaSearchStep; end
    --query construction
    if ejaString(tibula.ejaSqlQuery64) ~= "" then 
     sql=ejaBase64Decode(tibula.ejaSqlQuery64);
    else
     sql='SELECT ejaId';
     for k,v in next,tibulaSqlMatrix("SELECT name,type FROM ejaFields WHERE ejaModuleId=%d AND powerList>0 AND powerList !='' ORDER BY powerList;",tibula.ejaModuleId) do
      sql=sql..','..v.name;
     end
     for k,v in next,tibulaSqlMatrix('SELECT name,type FROM ejaFields WHERE ejaModuleId=%d;',tibula.ejaModuleId) do   
      sqlType[v.name]=v.type;
     end
     sql=sql..ejaSprintf(' FROM %s WHERE ejaOwner IN (%s)',tibula.ejaModuleName,tibula.ejaOwnerList);
     if ejaTableCount(tibula.ejaValues) > 0 then
      for k,v in next,tibula.ejaValues do
       local sqlTypeThis=ejaString(sqlType[k])
       if ejaString(v) ~= "" and not string.find(k,"%.") then 
        local sqlAnd="";
        v=string.gsub(v,"*","%%");
        v=string.gsub(v,"%%","%%%%%%%%");
        if sqlTypeThis == "boolean" or sqlTypeThis == "integer" then 
         sqlAnd=ejaSprintf(' AND %s = %d ',k,v); 
        end
        if sqlTypeThis == "date" or sqlTypeThis == "time" or sqlTypeThis == "datetime" then 
         sqlAnd=ejaSprintf(" AND %s='%s' ",k,tibulaDateSet(v,sqlTypeThis)); 
        end
        if sqlTypeThis == "dateRange" or sqlTypeThis == "timeRange" or sqlTypeThis == "datetimeRange" or sqlTypeThis == "integerRange" then
         if ejaString(tibula.ejaValues[k..".begin"]) ~= "" then sqlAnd=sqlAnd..ejaSprintf(" AND %s > '%s' ",k,tibulaDateSet(tibula.ejaValues[k..".begin"],"")); end
         if ejaString(tibula.ejaValues[k..".end"]) ~= "" then sqlAnd=sqlAnd..ejaSprintf(" AND %s < '%s' ",k,tibulaDateSet(tibula.ejaValues[k..".end"],"")); end
        end
        if ejaString(sqlAnd) == "" then sqlAnd=" AND "..k.." LIKE '"..v.."'"; end
        sql=sql..sqlAnd;
       end
      end
     end  
     --if linking restrict search to active links. If srcFieldName is present in ejaModuleLinks use this to restrict search.
     if ejaString(tibula.ejaAction) == "searchLink" then
      if ejaString(tibula.ejaLinkingField) ~= "" then
       sql=sql..ejaSprintf(" AND ejaId IN (SELECT ejaId FROM %s WHERE %s=%d AND ejaOwner IN (%s)) ",tibula.ejaModuleName,tibula.ejaLinkingField,tibula.ejaLinkFieldId,tibula.ejaOwnerList);
      else
       sql=sql..ejaSprintf(" AND ejaId IN (SELECT srcFieldId FROM ejaLinks WHERE srcModuleId=%d AND dstModuleId=%d AND dstFieldId=%d) ",tibula.ejaModuleId,tibula.ejaLinkModuleId,tibula.ejaLinkFieldId); 
      end
     end
     tibula.ejaSqlQuery64=ejaBase64Encode(sql);
    end
    --limit and order stuff
    if ejaString(tibula.ejaSqlLimit) == "" then tibula['ejaSqlLimit']=0; end
    if ejaTableCount(tibula.ejaSearchOrder) > 0 then
     tibula['ejaSqlOrder']="";
     for k,v in next,tibula.ejaSearchOrder do 
      if v then tibula.ejaSqlOrder=tibula.ejaSqlOrder..", "..k.." "..v; end
     end
     if ejaString(tibula.ejaSqlOrder) ~= "" then tibula.ejaSqlOrder=string.sub(tibula.ejaSqlOrder,2); end
    end 
    if ejaString(tibula.ejaSqlOrder) == "" then 
     tibula.ejaSqlOrder=tibulaSqlRun('SELECT sortList FROM ejaModules WHERE ejaId=%d',tibula.ejaModuleId);
     if ejaString(tibula.ejaSqlOrder) == "" then tibula.ejaSqlOrder=tibula.ejaDefaultSearchOrder; end
    end
    --finish query construction
    tibula.ejaSqlQueryRaw=sql;
    tibula.ejaSqlQuery=ejaSprintf('%s ORDER BY %s LIMIT %d,%d;',sql,tibula.ejaSqlOrder,tibula.ejaSqlLimit,tibula.ejaSearchStep);
    tibula.ejaId=0;
   end

  end 
 end 


 --Define ejaActionType and populate fields/result matrix
 if ejaString(tibula.ejaActionType) == "List" then 
  tibula.ejaSearchList=tibulaSqlSearchMatrix(tibula.ejaSqlQuery,tibula.ejaModuleId); 
 else
   if ejaNumber(tibula.ejaId) > 0 then 
    tibula.ejaActionType="Edit" 
   else 
    tibula.ejaActionType="Search" 
   end
  tibula.ejaFields=tibulaSqlFieldsMatrix(tibula.ejaModuleId, tibula.ejaActionType);
 end
  
 -- lua module script last call.
 tibulaModuleLua(1,web);
end


function tibulaTableExport()
 local data=""
  
 if ejaString(tibula.ejaOut) == "json" then 
  data=tibulaJsonExport(tibula['ejaModuleId']); 
 else --xhtml
  data=tibulaXhtmlExport(tibula['ejaModuleId']);
 end

 return data;
end 


function tibulaTableStop()
 if ejaNumber(tibula.ejaOutSession) < 1 then
  tibulaSessionWrite(tibula.ejaOwner,{});
 else
  --Update ejaSession
  local ejaBkp={}
  ejaBkp.ejaSqlQuery64=tibula.ejaSqlQuery64;
  ejaBkp.ejaLinkHistory=tibula.ejaLinkHistory;
  ejaBkp.ejaLinkHistoryOrder=tibula.ejaLinkHistoryOrder;
  ejaBkp.ejaSqlLimit=tibula.ejaSqlLimit;
  ejaBkp.ejaSqlOrder=tibula.ejaSqlOrder; 
  tibulaSessionWrite(tibula.ejaOwner,ejaBkp);
  ejaBkp="";
 end
 tibula={}
end


-- Copyright (C) 2007-2020 by Ubaldo Porcheddu <ubaldo@eja.it>
--
-- Magyar rapszódiák


function tibulaXhtmlExport(moduleId)         --export data as xhtml output
 tibula.ejaHttpHeaders["Content-Type"]="text/html; charset=utf-8"
 tibula.ejaHttpHeaders["Pragma"]="no-cache";
 tibula.ejaHttpHeaders["Expires"]= "-1";
 tibula.ejaHttpHeaders["Cache-Control"]="no-cache";
 
 local r=''
 r=r..tibulaXhtmlHeader()
 r=r..tibulaXhtmlMenu(moduleId)
 r=r..tibulaXhtmlModule(moduleId)
 r=r..tibulaXhtmlInfo()
 r=r..tibulaXhtmlCommand(moduleId)
 r=r..tibulaXhtmlFooter();
 
 return r; 
end


function tibulaXhtmlHeader() 	--return xhtml header and open form
 local r="";

 local script=eja.opt.tibulaScript or "https://cdn.tibula.net/tibula.js"
 
 r=ejaSprintf('<!DOCTYPE html>');
 r=r..ejaSprintf('<html lang="%s">',tibula.ejaLanguage,tibula.ejaLanguage);
 r=r..ejaSprintf('<head>');
 r=r..ejaSprintf('<meta charset="utf-8">')
 r=r..ejaSprintf('<meta name="author" content="ubaldo@eja.it">')
 r=r..ejaSprintf('<meta name="viewport" content="width=device-width, initial-scale=1.0">')
 r=r..ejaSprintf('<script type="text/javascript" src="%s"></script>',script);
 r=r..ejaSprintf('<title>[%s]</title>',tibulaTranslate(tibula.ejaModuleName));
 r=r..ejaSprintf('</head>');
 r=r..ejaSprintf('<body><div id="ejaPage"><form name="ejaForm" action="?ejaLanguage=%s" method="post">',tibula.ejaLanguage);

 return r;
end


function tibulaXhtmlFooter()	--return xhtml closed tags 
 local r=""
 
 if ejaNumber(tibula.ejaId) > 0 then r=r..ejaSprintf('<input type="hidden" name="ejaId" value="%d"/>',tibula.ejaId); end
 if ejaNumber(tibula.ejaModuleId) > 0 then r=r..ejaSprintf('<input type="hidden" name="ejaModuleId" value="%d"/>',tibula.ejaModuleId); end
 if ejaString(tibula.ejaSession) ~= "" then r=r..ejaSprintf('<input type="hidden" name="ejaSession" value="%s"/>',tibula.ejaSession); end
 r=r..ejaSprintf('</form></div></body></html>');
 
 return r;
end


function tibulaXhtmlMenu(moduleId)		 --return the modules reverse traversal tree
 local i=0;
 local r="";
 local a=tibulaSqlModuleTree(tibula['ejaOwner'],moduleId);
 
 r='<div id="ejaMenu">';
  
  r=r..'<div id="ejaMenuPath">'
  r=r..ejaSprintf('<a href="?ejaSession=%s&amp;ejaModuleId=%d&amp;ejaModuleChange=35248">%s</a>',tibula['ejaSession'],moduleId,tibulaTranslate("ejaRoot"));
  for i=#a['pathId'],1,-1 do
   r=r..ejaSprintf(' <a href="?ejaSession=%s&amp;ejaModuleId=%d&amp;ejaModuleChange=%d">%s</a>',tibula['ejaSession'],moduleId,a['pathId'][i],tibulaTranslate(a['pathName'][i]));
  end
  r=r..'</div>';
 
  r=r..'<div id="ejaMenuLinks">';
  for i=1,#a['treeId'] do
   r=r..ejaSprintf(' <a href="?ejaSession=%s&amp;ejaModuleId=%d&amp;ejaModuleChange=%d">%s</a>',tibula['ejaSession'],moduleId,a['treeId'][i],tibulaTranslate(a['treeName'][i]));
  end
  r=r.."</div>";

  r=r..'<div id="ejaModuleLinks">';   
  for i=1,#a['linkId'] do
   r=r..ejaSprintf('<a href="?ejaSession=%s&amp;ejaModuleChange=%d&amp;ejaModuleLink=%d.%d">%s</a> ',tibula['ejaSession'],a['linkId'][i],tibula['ejaModuleId'],tibula['ejaId'],tibulaTranslate(a['linkName'][i]));
  end
  for i=1,#a['historyId'] do
   r=r..ejaSprintf(' <a class="active" href="?ejaSession=%s&amp;ejaModuleLinkBack=%d">%s</a>',tibula['ejaSession'],a['historyId'][i],tibulaTranslate(a['historyName'][i]));
  end
  r=r..'</div>'; 
 
 r=r.."</div>";
 
 return r;
end


function tibulaXhtmlModule(moduleId) 	--return the module. 
 local r="";
 local moduleName=tibulaSqlRun('SELECT name FROM ejaModules WHERE ejaId=%d;',moduleId);
 local a={}
 
 if ejaCheck(tibula['ejaActionType'],"List") then
  if ejaCheck(tibula['ejaSearchList']) then 
   local t=1;
   if ejaCheck(tibula['ejaLinking']) and not ejaCheck(tibula['ejaLinkingField']) and not ejaCheck(tibula['ejaModuleName'],"ejaFiles") then t=2 end 
   if ejaCheck(tibula['ejaMatrix']) then t=3 end
   r=r..tibulaXhtmlTable(tibula['ejaSearchList'],t); 
  else 
   tibulaReset();
   tibula['ejaActionType']="Search"; 
   tibulaInfo("ejaSearchEmpty");
  end
 end
 
 if not ejaCheck(tibula['ejaActionType'],"List") and ejaCheck(tibula['ejaFields']) then 
  for k,v in pairs(tibula['ejaFields']) do
   r=r..tibulaXhtmlField(v['name'],v['type'],v['value'],v['values'])
  end
 end
 
 if ejaCheck(tibula['ejaAction'],"help") then 
  r=tibulaXhtmlHelp(tibula['ejaActionType'],tibula['ejaModuleId'],tibula['ejaLanguage']); 
 end
 
 r=ejaSprintf('<div id="ejaModule" class="ejaModule%s">%s</div>',tibulaUCFirst(moduleName),r);

 return r;
end


function tibulaXhtmlCommand(moduleId) 	--return the html list of enabled commands for this module
 local r="";
 local command="";
 
 for k,v in ipairs(tibulaSqlCommandArray(tibula['ejaOwner'],moduleId,tibula['ejaActionType'])) do
  command=ejaSprintf(' <input id="ejaCommand%s" type="submit" name="ejaAction[%s]" value="%s"/>',tibulaUCFirst(v),v,tibulaTranslate(v));
  if not ejaCheck(tibula['ejaSqlQuery64']) and ejaCheck(v,"list") then command=""; end
  if ejaCheck(tibula['ejaSearchStep']) then 
   if not ejaCheck(tibula['ejaSqlLimit']) and ejaCheck(v,"previous") then command=""; end
   if ejaCheck(tibula['ejaSqlLimit']) and not ejaCheck(tibula['ejaSearchStep'],tibula['ejaSqlCount']) and ejaCheck(v,"next") then command=""; end
  end
  if not ejaCheck(tibula['ejaLinking']) and ( ejaCheck(v,"link") or ejaCheck(v,"unlink") or ejaCheck(v,"searchLink") or ejaCheck(v,"linkBack") ) then command=""; end
  if ejaCheck(v,"searchLink") then command=""; end
  r=r..command;
 end
 
 r='<div id="ejaCommands">'..r..'</div>'; 
 
 return r;
end


function tibulaXhtmlField(fieldName, fieldType, fieldValue, fieldValueArray) 	--return the xhtml field for name of tType. 
 local r="";
 local fieldValueEncoded=ejaString(fieldValue):gsub(".",function(x) return string.format("&#x%x;",x:byte()) end)

 if ejaCheck(fieldType,"label") then 
  r=r..ejaSprintf('<div class="ejaModule%s">%s</div>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName));
 end 
 
 if ejaCheck(fieldType,"sqlTable") then 
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend>%s</fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),tibulaXhtmlTable(fieldValueArray,0));
 end 

 if ejaCheck(fieldType,"text") or ejaCheck(fieldType,"password") then
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><input type="%s" name="ejaValues[%s]" value="%s"/></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),fieldType,fieldName,fieldValueEncoded);
 end

 if ejaCheck(fieldType,"integer") or ejaCheck(fieldType,"integerRange") or ejaCheck(fieldType,"decimal") then
  if ejaCheck(fieldType,"integerRange") and ejaCheck(tibula['ejaActionType'],"Search") then
   if not ejaCheck(tibula['ejaValues'][fieldName..".begin"]) then tibula['ejaValues'][fieldName..".begin"]=""; end
   if not ejaCheck(tibula['ejaValues'][fieldName..".end"]) then tibula['ejaValues'][fieldName..".end"]=""; end
   r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName));
   r=r..ejaSprintf('<label>%s<input type="text" name="ejaValues[%s.begin]" value="%s"/></label>',tibulaTranslate("ejaIntegerFrom"),fieldName,tibula['ejaValues'][fieldName..".begin"]);  
   r=r..ejaSprintf('<label>%s<input type="text" name="ejaValues[%s.end]" value="%s"/></label>',tibulaTranslate("ejaIntegerTo"),fieldName,tibula['ejaValues'][fieldName..".end"]);  
   r=r..ejaSprintf('</fieldset>');
  else
   if not tibula['ejaValues'][fieldName] then fieldValue=""; else fieldValue=tibula['ejaValues'][fieldName]; end 
   r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><input type="%s" name="ejaValues[%s]" value="%s"/></fieldset>',string.sub(tibulaUCFirst(fieldType),0,-5),tibulaTranslate(fieldName),fieldType,fieldName,fieldValue);
  end
 end

 if ejaCheck(fieldType,"textArea") or ejaCheck(fieldType,"htmlArea") then
  local class="";
  local title=tibulaTranslate(fieldName);
  if ejaCheck(fieldType,"htmlArea") then 
   class='class="jsEditor"';
   fieldValue=tibulaXhtmlFilter(fieldValue); 
   title=ejaSprintf('%s',tibulaTranslate(fieldName));
  end
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><textarea %s name="ejaValues[%s]">%s</textarea></fieldset>',tibulaUCFirst(fieldType),title,class,fieldName,fieldValue);
 end

 if (string.find("#date#dateRange#time#timeRange#datetime#datetimeRange#",fieldType)) then
  if string.find(fieldType,"Range") and ejaCheck(tibula['ejaActionType'],"Search") then
   if not ejaCheck(tibula['ejaValues'][fieldName..".begin"]) then tibula['ejaValues'][fieldName..".begin"]="" end
   if not ejaCheck(tibula['ejaValues'][fieldName..".end"]) then tibula['ejaValues'][fieldName..".end"]="" end
   r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName));
   r=r..ejaSprintf('<label>%s<input type="text" name="ejaValues[%s.begin]" value="%s" /></label>',tibulaTranslate("ejaDateFrom"),fieldName,tibula['ejaValues'][fieldName..".begin"]);  
   r=r..ejaSprintf('<label>%s<input type="text" name="ejaValues[%s.end]" value="%s" /></label>',tibulaTranslate("ejaDateTo"),fieldName,tibula['ejaValues'][fieldName..".end"]);
   r=r..ejaSprintf('</fieldset>');
  else
   r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><input type="text" name="ejaValues[%s]" value="%s" /></fieldset>',string.sub(tibulaUCFirst(fieldType),0,-5),tibulaTranslate(fieldName),fieldName,fieldValue);
  end
 end

 if ejaCheck(fieldType,"boolean") then
  if ejaCheck(fieldValue) then options='<option value="1" selected="selected">TRUE</option><option value="0">FALSE</option>'; else options='<option value="1">TRUE</option><option value="0" selected="selected">FALSE</option>'; end
  if ejaCheck(tibula['ejaActionType'],"Search") then options='<option></option><option value="1">TRUE</option><option value="0">FALSE</option>'; end
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><select name="ejaValues[%s]">%s</select></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),fieldName,options);
 end

 if ejaCheck(fieldType,"select") or ejaCheck(fieldType,"sqlMatrix") then
  local options="";
  local selected="";
  for k,v in ipairs(getmetatable(fieldValueArray)) do
   if ejaCheck(fieldValue,v) then selected=' selected="selected"'; else selected=""; end
    options=options..ejaSprintf('<option value="%s"%s>%s</option>',v,selected,fieldValueArray[v]);
  end
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><select name="ejaValues[%s]"><option></option>%s</select></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),fieldName,options);   
 end

 if ejaCheck(fieldType,"sqlValue") then
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><b>%s</b></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),fieldValue); 
 end
 
 if ejaCheck(fieldType,"view") then
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><input type="text" value="%s" disabled></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),ejaString(fieldValue));
 end
 
 if ejaCheck(fieldType,"hidden") then
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><input type="%s" name="ejaValues[%s]" value="%s"/></fieldset>',tibulaUCFirst(fieldType),fieldType,fieldName,fieldValueEncoded);
 end
 
 if ejaCheck(fieldType,"file") then 
  r=r..ejaSprintf('<fieldset class="ejaModule%s"><legend>%s</legend><input type="%s" name="%s" onClick="ejaForm.enctype=\'multipart/form-data\'"/></fieldset>',tibulaUCFirst(fieldType),tibulaTranslate(fieldName),fieldType,fieldName);  
 end
 
 return r;
end


function tibulaXhtmlTable(sqlArray,t) 	--return html table of results for t. t=0 output plain table, t=1 first column is ejaId; t=2 first column ejaId, second powerLink. t=3 each cell is editable, ejaValuesUpdate will be populated with row name, ejaId, and value.
 local r='<table id="ejaTableList" border="1">';
 local value=""
 local ejaIdRow=0;
 local y,x=0,0;
 
 for key,row in pairs (sqlArray) do
  y=y+1;
  
  if (y==1) then
   r=r..'<tr>';
   for k,v in pairs(getmetatable(sqlArray)) do 
    if (k==1 and t>0) then 
     r=r..'<th class="mini"><input type="checkbox" name="ejaIdCheckAll" /></th>'; 
     if (t == 2) then r=r..ejaSprintf('<th class="mini">%s</th>',tibulaTranslate("powerLink")); end
    else 
     if (t == 1 or t == 2) then
      options="<option></option>";
      if ejaCheck(tibula['ejaSearchOrder']) and ejaCheck(tibula['ejaSearchOrder'][v],"ASC") or string.find(tibula['ejaSqlOrder']," "..v.." ASC") then options=options..ejaSprintf('<option value="ASC" selected="selected">AZ</option>'); else options=options..ejaSprintf('<option value="ASC">AZ</option>'); end
      if ejaCheck(tibula['ejaSearchOrder']) and ejaCheck(tibula['ejaSearchOrder'][v],"DESC") or string.find(tibula['ejaSqlOrder']," "..v.." DESC") then options=options..ejaSprintf('<option value="DESC" selected="selected">ZA</option>'); else options=options..ejaSprintf('<option value="DESC">ZA</option>'); end
      r=r..ejaSprintf('<th>%s</th><th class="mini"><select name="ejaSearchOrder[%s]">%s</select></th>',tibulaTranslate(v),v,options); 
     else
      r=r..ejaSprintf('<th colspan="2">%s</th>',tibulaTranslate(v)); 
     end
    end
   end
   r=r..'</tr>';
  end 
  
  r=r..'<tr>';
  x=0;
  for k,v in pairs(getmetatable(sqlArray)) do
   x=x+1;
   if row[v] then value=row[v] else value="" end
   if ejaString(v) == "ejaId" and t > 0 then 
    ejaIdRow=value;
    r=r..ejaSprintf('<td><input type="checkbox" name="ejaId[%d]" value="%d" /></td>',value,value); 
    if t == 2 then
     local sql=tibulaSqlArray('SELECT ejaId,power FROM ejaLinks WHERE srcModuleId=%d AND srcFieldId=%d AND dstModuleId=%d AND dstFieldId=%d;',tibula['ejaModuleId'],value,tibula['ejaLinkModuleId'],tibula['ejaLinkFieldId']);
     if not ejaCheck(sql) then 
      sql={}
      sql['ejaId']=0; 
      sql['power']=0;
     end
     r=r..ejaSprintf('<td class="powerLink"><input type="text" name="ejaLinkPower[%d][%d]" value="%d" onClick="ejaIdCheck(%d)"/></td>',value,sql['ejaId'],sql['power'],value);
    end
   else 
    if t == 3 then
     r=r..ejaSprintf('<td class="powerLink" colspan="2"><input type="text" name="ejaValues[%s.%d]" value="%s"/></td>',v,ejaIdRow,value); 
    else
     r=r..ejaSprintf('<td colspan="2">%s</td>',value); 
    end
   end
  end
  r=r..'</tr>';
  
 end
 
 if ejaCheck(tibula['ejaSqlCountTotal']) then
  r=r..ejaSprintf('<tr><th colspan="%d">%d-%d / %d</th></tr>',(x*2),tibula['ejaSqlLimit']+1,(tibula['ejaSqlLimit']+tibula['ejaSqlCount']),tibula['ejaSqlCountTotal']);
 end
 
 r=r..'</table>';
 
 return r;
end


function tibulaXhtmlHelp(actionType, moduleId, language) 	--return xml help for selected moduleId/language 
 local r="";
 
 r=tibulaSqlRun("SELECT text FROM ejaHelps WHERE (ejaModuleId=0 OR ejaModuleId=%d) AND (actionType='%s' OR actionType='') AND ejaLanguage='%s' ORDER BY actionType DESC, ejaModuleId DESC LIMIT 1;",moduleId,actionType,language) or "";
 return ejaSprintf('<div id="ejaModuleHelps">%s</div>',r); 
end

function tibulaXhtmlInfo() 	--return an alert/info box
 local r="";
 local info="";
 
 if ejaCheck(tibula['ejaActionType']) and ejaCheck(tibula['ejaAction']) then info="alert"..tibula['ejaActionType']..tibulaUCFirst(tibula['ejaAction']) end
 r=ejaSprintf('<div id="ejaInfo">%s</div>',tibulaInfo(info)); 

 return r;
end


function tibulaXhtmlFilter(value) 
 
 value=string.gsub(value,"&","&amp;")
 value=string.gsub(value,"'","&#039;")
 value=string.gsub(value,"\"","&quot;")
 value=string.gsub(value,"<","&lt;")
 value=string.gsub(value,">","&gt;")
    
 return value
end


